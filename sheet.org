#+OPTIONS: toc:nil
#+LATEX_HEADER: \input{title_simple}
#+LATEX_HEADER:\usepackage[top=0.5in,left=1.0in,right=1.0in,bottom=1.0in]{geometry}

* Algorithms

** Non-modifying sequence operations

#+BEGIN_SRC cpp
int count(begin, end, val)
int count_if(begin, end, predicate)
#+END_SRC

#+BEGIN_SRC cpp
pair<it1, it2> mismatch(begin1, end1, begin2)
pair<it1, it2> mismatch(begin1, end1, begin2, predicate)
#+END_SRC
Finds the first points at which the ranges differ. Returns a pair of iterators to the points where they differ. =predicate= will be used to determine equality if it is provided.

#+BEGIN_SRC cpp
bool equal(begin1, end1, begin2)
bool equal(begin1, end1, begin2, predicate)
#+END_SRC
Returns =true= if the ranges are equal. =predicate= will be used to determine equality if provided. 

#+BEGIN_SRC cpp
iterator find(begin1, end1, target)
iterator find_if(begin1, end1, predicate)
#+END_SRC
Returns an iterator to the first occurrence of =target= in the range. =predicate= will be used to determine equality if it is provided.

#+BEGIN_SRC cpp
iterator find_end(begin1, end1, begin2, end2)
iterator find_end(begin1, end1, begin2, end2, predicate)
#+END_SRC
Finds the last occurrence of the range =(begin2, end2)= in the range =(begin1, end1)=. =predicate= will be used to determine equality if it is provided.

#+BEGIN_SRC cpp
iterator find_first_of(begin1, end1, begin2, end2)
iterator find_first_of(begin1, end1, begin2, end2, predicate)
#+END_SRC
Searches the range =(begin1, end1)= for any element of the range =(begin2, end2)=. =predicate= will be used to determine equality if it is provided.

#+BEGIN_SRC cpp
iterator adjacent_find(begin, end)
iterator adjacent_find(begin, end, predicate)
#+END_SRC
Returns an iterator to the first occurrence of consecutive identical elements in the range =(begin, end)=.

#+BEGIN_SRC cpp
iterator search(begin1, end1, begin2, end2)
iterator search(begin1, end1, begin2, end2, predicate)
#+END_SRC
Returns an iterator to the first occurrence of (begin2, end2) in the range =(begin1, end1)=

#+BEGIN_SRC cpp
iterator search_n(begin, end, count, value)
iterator search_n(begin, end, count, value, predicate)
#+END_SRC
Returns an iterator to the first occurrence of =n= copies of =value= in the range =(begin, end)=

** Modifying Sequence Operations

#+BEGIN_SRC cpp
iterator copy(begin1, end1, begin2)
#+END_SRC
Copy the elements from the range =(begin1, end1)= to a not smaller range starting at =begin2=. Returns one past the end of the output range.

#+BEGIN_SRC cpp
iterator copy_backward(begin1, end1, end2)
#+END_SRC
Same as above, but starts by copying =end1= to =end2=, downward.

#+BEGIN_SRC cpp
void fill(begin, end, val)
#+END_SRC
Fill the range =(begin, end)= with val.

#+BEGIN_SRC cpp
void fill_n(begin, count, val)
#+END_SRC
Assign the first =count= elements of the range starting at =begin= to =val=.

#+BEGIN_SRC cpp
iterator transform(begin1, end1, begin2, function)
iterator transform(begin1, end1, begin2, begin3, function)
#+END_SRC
The first form applies =function= to the elements from the range =(begin1, end1)= and stores them in the range starting at =begin2=. The second form applies a binary function with the pattern =begin3= = =function(begin1, begin2)=, for the length of the range =(begin1, end1)=.

#+BEGIN_SRC cpp
void generate(begin, end, function)
#+END_SRC
Assign each element in the range =(begin, end)= a value returned by =function=.

#+BEGIN_SRC cpp
void generate_n(begin, count, function)
#+END_SRC
Assign =count= elements from =function= to the range starting at =begin=.

#+BEGIN_SRC cpp
iterator remove(begin, end, value)
iterator remove_if(begin, end, predicate)
#+END_SRC
Sort the range =(begin, end)= such that all occurrences of =value= are at the end. Returns an iterator to one past the end of the range without any of those values. =predicate= will be used to determine equality if given.

#+BEGIN_SRC cpp
iterator remove_copy(begin1, end1, begin2, value)
iterator remove_copy_if(begin1, end1, begin2, predicate)
#+END_SRC
Copy the values from =(begin1, end1)= to the range starting at =begin2= omitting =value=.



